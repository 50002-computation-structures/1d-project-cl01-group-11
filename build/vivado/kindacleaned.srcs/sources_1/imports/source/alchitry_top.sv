/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [2:0] io_select,
        output reg [7:0] io_score,
        output reg [2:0] score_select,
        input wire [8:0] button,
        output reg [7:0] io_high,
        output reg [2:0] high_select
    );
    logic rst;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam _MP_STAGES_1248727135 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1248727135)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    logic [8:0] M_gamedatapath_button;
    logic [3:0] M_gamedatapath_button1;
    logic [3:0] M_gamedatapath_button2;
    logic [3:0] M_gamedatapath_button3;
    logic [31:0] M_gamedatapath_debug;
    logic [31:0] M_gamedatapath_timer_out;
    logic [31:0] M_gamedatapath_score_out;
    logic [31:0] M_gamedatapath_highscore;
    logic [31:0] M_gamedatapath_gameflag;
    
    gamedatapath gamedatapath (
        .clk(clk),
        .rst(rst),
        .button(M_gamedatapath_button),
        .button1(M_gamedatapath_button1),
        .button2(M_gamedatapath_button2),
        .button3(M_gamedatapath_button3),
        .debug(M_gamedatapath_debug),
        .timer_out(M_gamedatapath_timer_out),
        .score_out(M_gamedatapath_score_out),
        .highscore(M_gamedatapath_highscore),
        .gameflag(M_gamedatapath_gameflag)
    );
    
    
    localparam logic [2:0][1:0] _MP_DIGITS_1118527760 = {{2'h3, 2'h3, 2'h3}};
    localparam logic [2:0][4:0] _MP_DIV_1118527760 = {{5'h10, 5'h10, 5'h10}};
    logic [2:0][2:0][3:0] M_seg_values;
    logic [2:0][6:0] M_seg_seg;
    logic [2:0][2:0] M_seg_sel;
    
    genvar idx_0_1118527760;
    
    generate
        for (idx_0_1118527760 = 0; idx_0_1118527760 < 3; idx_0_1118527760 = idx_0_1118527760 + 1) begin: forLoop_idx_0_1118527760
            multi_seven_seg #(
                .DIGITS(_MP_DIGITS_1118527760[idx_0_1118527760]),
                .DIV(_MP_DIV_1118527760[idx_0_1118527760])
            ) seg (
                .clk(clk),
                .rst(rst),
                .values(M_seg_values[idx_0_1118527760]),
                .seg(M_seg_seg[idx_0_1118527760]),
                .sel(M_seg_sel[idx_0_1118527760])
            );
        end
    endgenerate
    
    
    localparam _MP_DIGITS_1482584806 = 2'h3;
    localparam _MP_LEADING_ZEROS_1482584806 = 1'h1;
    logic [9:0] M_bin_to_dec_timer_value;
    logic [2:0][3:0] M_bin_to_dec_timer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_1482584806),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_1482584806)
    ) bin_to_dec_timer (
        .value(M_bin_to_dec_timer_value),
        .digits(M_bin_to_dec_timer_digits)
    );
    
    
    localparam _MP_DIGITS_266240594 = 2'h3;
    localparam _MP_LEADING_ZEROS_266240594 = 1'h1;
    logic [9:0] M_bin_to_dec_highscore_value;
    logic [2:0][3:0] M_bin_to_dec_highscore_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_266240594),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_266240594)
    ) bin_to_dec_highscore (
        .value(M_bin_to_dec_highscore_value),
        .digits(M_bin_to_dec_highscore_digits)
    );
    
    
    localparam _MP_DIGITS_866529083 = 2'h3;
    localparam _MP_LEADING_ZEROS_866529083 = 1'h1;
    logic [9:0] M_bin_to_dec_score_value;
    logic [2:0][3:0] M_bin_to_dec_score_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_866529083),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_866529083)
    ) bin_to_dec_score (
        .value(M_bin_to_dec_score_value),
        .digits(M_bin_to_dec_score_digits)
    );
    
    
    logic [2:0][3:0] M_button_decoder_buttonval;
    logic [2:0][7:0] M_button_decoder_out;
    
    genvar idx_0_61259768;
    
    generate
        for (idx_0_61259768 = 0; idx_0_61259768 < 3; idx_0_61259768 = idx_0_61259768 + 1) begin: forLoop_idx_0_61259768
            button_decoder button_decoder (
                .buttonval(M_button_decoder_buttonval[idx_0_61259768]),
                .out(M_button_decoder_out[idx_0_61259768])
            );
        end
    endgenerate
    
    
    always @* begin
        M_gamedatapath_button = button;
        M_button_decoder_buttonval[1'h0] = M_gamedatapath_button1[2'h3:1'h0];
        M_button_decoder_buttonval[1'h1] = M_gamedatapath_button2[2'h3:1'h0];
        M_button_decoder_buttonval[2'h2] = M_gamedatapath_button3[2'h3:1'h0];
        io_led[2'h2:1'h0] = {{8'hff, 8'hff, 8'hff}};
        if (M_gamedatapath_gameflag) begin
            io_led[1'h0] = M_button_decoder_out[1'h0] | M_button_decoder_out[1'h1] | M_button_decoder_out[2'h2];
            io_led[1'h1] = 8'h0;
        end
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        M_bin_to_dec_timer_value = M_gamedatapath_timer_out;
        M_bin_to_dec_highscore_value = M_gamedatapath_highscore;
        M_bin_to_dec_score_value = M_gamedatapath_score_out;
        M_seg_values[1'h0] = M_bin_to_dec_timer_digits;
        M_seg_values[1'h1] = M_bin_to_dec_score_digits;
        M_seg_values[2'h2] = M_bin_to_dec_highscore_digits;
        io_segment = ~M_seg_seg[1'h0];
        io_select = M_seg_sel[1'h0];
        if (M_seg_sel[1'h0] == 3'h2) begin
            io_segment[3'h7] = 1'h0;
        end
        io_score = ~M_seg_seg[1'h1];
        score_select = M_seg_sel[1'h1];
        io_high = ~M_seg_seg[2'h2];
        high_select = M_seg_sel[2'h2];
    end
    
    
endmodule