/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module gamedatapath (
        input wire [8:0] button,
        input wire clk,
        input wire rst,
        output reg [3:0] button1,
        output reg [3:0] button2,
        output reg [3:0] button3,
        output reg [31:0] debug,
        output reg [31:0] timer_out,
        output reg [31:0] score_out,
        output reg [31:0] highscore,
        output reg [31:0] gameflag
    );
    localparam CLK_FREQ = 27'h5f5e100;
    localparam CLOCK = 5'h16;
    localparam DELAY = 5'h1a;
    logic [31:0] input_alu_a;
    logic [31:0] input_alu_b;
    logic [10:0] M_game_alu_a;
    logic [10:0] M_game_alu_b;
    logic [5:0] M_game_alu_alufn;
    logic [10:0] M_game_alu_out;
    logic [3:0] M_game_alu_z;
    logic [3:0] M_game_alu_v;
    logic [3:0] M_game_alu_n;
    
    alu game_alu (
        .a(M_game_alu_a),
        .b(M_game_alu_b),
        .alufn(M_game_alu_alufn),
        .out(M_game_alu_out),
        .z(M_game_alu_z),
        .v(M_game_alu_v),
        .n(M_game_alu_n)
    );
    
    
    localparam _MP_SIZE_2044310961 = 1'h1;
    localparam _MP_DIV_2044310961 = 5'h16;
    localparam _MP_TOP_2044310961 = 1'h0;
    localparam _MP_UP_2044310961 = 1'h1;
    logic [0:0] M_game_timer_clock_value;
    
    counter #(
        .SIZE(_MP_SIZE_2044310961),
        .DIV(_MP_DIV_2044310961),
        .TOP(_MP_TOP_2044310961),
        .UP(_MP_UP_2044310961)
    ) game_timer_clock (
        .rst(rst),
        .clk(clk),
        .value(M_game_timer_clock_value)
    );
    
    
    localparam _MP_SIZE_1681754913 = 1'h1;
    localparam _MP_DIV_1681754913 = 5'h1a;
    localparam _MP_TOP_1681754913 = 1'h0;
    localparam _MP_UP_1681754913 = 1'h1;
    logic [0:0] M_init_delay_value;
    
    counter #(
        .SIZE(_MP_SIZE_1681754913),
        .DIV(_MP_DIV_1681754913),
        .TOP(_MP_TOP_1681754913),
        .UP(_MP_UP_1681754913)
    ) init_delay (
        .rst(rst),
        .clk(clk),
        .value(M_init_delay_value)
    );
    
    
    localparam logic [8:0][0:0] _MP_RISE_1775668867 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [8:0][0:0] _MP_FALL_1775668867 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [8:0] M_button_edge_in;
    logic [8:0] M_button_edge_out;
    
    genvar idx_0_1775668867;
    
    generate
        for (idx_0_1775668867 = 0; idx_0_1775668867 < 9; idx_0_1775668867 = idx_0_1775668867 + 1) begin: forLoop_idx_0_1775668867
            edge_detector #(
                .RISE(_MP_RISE_1775668867[idx_0_1775668867]),
                .FALL(_MP_FALL_1775668867[idx_0_1775668867])
            ) button_edge (
                .clk(clk),
                .in(M_button_edge_in[idx_0_1775668867]),
                .out(M_button_edge_out[idx_0_1775668867])
            );
        end
    endgenerate
    
    
    localparam logic [8:0][26:0] _MP_CLK_FREQ_848674349 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_848674349 = 5'h14;
    localparam _MP_NUM_SYNC_848674349 = 2'h2;
    logic [8:0] M_button_cond_in;
    logic [8:0] M_button_cond_out;
    
    genvar idx_0_848674349;
    
    generate
        for (idx_0_848674349 = 0; idx_0_848674349 < 9; idx_0_848674349 = idx_0_848674349 + 1) begin: forLoop_idx_0_848674349
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_848674349[idx_0_848674349]),
                .MIN_DELAY(_MP_MIN_DELAY_848674349),
                .NUM_SYNC(_MP_NUM_SYNC_848674349)
            ) button_cond (
                .clk(clk),
                .in(M_button_cond_in[idx_0_848674349]),
                .out(M_button_cond_out[idx_0_848674349])
            );
        end
    endgenerate
    
    
    localparam _MP_RISE_296647364 = 1'h1;
    localparam _MP_FALL_296647364 = 1'h0;
    logic M_edge_detector_game_timer_out;
    
    edge_detector #(
        .RISE(_MP_RISE_296647364),
        .FALL(_MP_FALL_296647364)
    ) edge_detector_game_timer (
        .in(M_game_timer_clock_value),
        .clk(clk),
        .out(M_edge_detector_game_timer_out)
    );
    
    
    localparam _MP_RISE_1375075572 = 1'h1;
    localparam _MP_FALL_1375075572 = 1'h0;
    logic M_edge_detector_init_delay_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1375075572),
        .FALL(_MP_FALL_1375075572)
    ) edge_detector_init_delay (
        .in(M_init_delay_value),
        .clk(clk),
        .out(M_edge_detector_init_delay_out)
    );
    
    
    logic [3:0] M_game_cu_regfile_rd2;
    logic [5:0] M_game_cu_alufn;
    logic [2:0] M_game_cu_asel;
    logic [2:0] M_game_cu_bsel;
    logic [3:0] M_game_cu_wa;
    logic [3:0] M_game_cu_ra1;
    logic [3:0] M_game_cu_ra2;
    logic [0:0] M_game_cu_we;
    
    game_cu game_cu (
        .rst(rst),
        .buttonpress(M_button_edge_out[3'h7:1'h0]),
        .start(M_button_edge_out[4'h8]),
        .decrease_timer(M_edge_detector_game_timer_out),
        .delay(M_edge_detector_init_delay_out),
        .clk(clk),
        .regfile_rd2(M_game_cu_regfile_rd2),
        .alufn(M_game_cu_alufn),
        .asel(M_game_cu_asel),
        .bsel(M_game_cu_bsel),
        .wa(M_game_cu_wa),
        .ra1(M_game_cu_ra1),
        .ra2(M_game_cu_ra2),
        .we(M_game_cu_we)
    );
    
    
    logic [31:0] M_game_regfiles_data;
    logic [31:0] M_game_regfiles_rd1;
    logic [31:0] M_game_regfiles_rd2;
    logic [31:0] M_game_regfiles_timer_out;
    logic [31:0] M_game_regfiles_score_out;
    logic [31:0] M_game_regfiles_button1_out;
    logic [31:0] M_game_regfiles_button2_out;
    logic [31:0] M_game_regfiles_button3_out;
    logic [31:0] M_game_regfiles_highscore_out;
    logic [31:0] M_game_regfiles_flag_out;
    logic [31:0] M_game_regfiles_debug;
    
    game_regfiles game_regfiles (
        .we(M_game_cu_we),
        .wa(M_game_cu_wa),
        .ra1(M_game_cu_ra1),
        .ra2(M_game_cu_ra2),
        .rst(rst),
        .clk(clk),
        .data(M_game_regfiles_data),
        .rd1(M_game_regfiles_rd1),
        .rd2(M_game_regfiles_rd2),
        .timer_out(M_game_regfiles_timer_out),
        .score_out(M_game_regfiles_score_out),
        .button1_out(M_game_regfiles_button1_out),
        .button2_out(M_game_regfiles_button2_out),
        .button3_out(M_game_regfiles_button3_out),
        .highscore_out(M_game_regfiles_highscore_out),
        .flag_out(M_game_regfiles_flag_out),
        .debug(M_game_regfiles_debug)
    );
    
    
    localparam _MP_SEED_1382571997 = 33'h19430f418;
    logic [2:0] M_rng_num;
    
    pn_gen #(
        .SEED(_MP_SEED_1382571997)
    ) rng (
        .rst(rst),
        .next(1'h1),
        .seed(32'h59c739f9),
        .clk(clk),
        .num(M_rng_num)
    );
    
    
    always @* begin
        M_button_cond_in = button;
        M_button_edge_in = M_button_cond_out;
        M_game_cu_regfile_rd2 = M_game_regfiles_rd2;
        
        case (M_game_cu_asel)
            3'h0: begin
                input_alu_a = M_game_regfiles_rd1;
            end
            3'h1: begin
                input_alu_a = 10'h258;
            end
            3'h2: begin
                input_alu_a = 1'h1;
            end
            3'h3: begin
                input_alu_a = 1'h0;
            end
            3'h4: begin
                input_alu_a = 2'h3;
            end
            3'h5: begin
                input_alu_a = 3'h4;
            end
            default: begin
                input_alu_a = 1'h0;
            end
        endcase
        
        case (M_game_cu_bsel)
            3'h0: begin
                input_alu_b = M_game_regfiles_rd2;
            end
            3'h1: begin
                input_alu_b = 1'h1;
            end
            3'h2: begin
                input_alu_b = M_rng_num;
            end
            3'h3: begin
                input_alu_b = 1'h0;
            end
            3'h4: begin
                input_alu_b = 2'h3;
            end
            3'h5: begin
                input_alu_b = 3'h4;
            end
            3'h6: begin
                input_alu_b = 2'h2;
            end
            default: begin
                input_alu_b = 1'h0;
            end
        endcase
        M_game_alu_a = input_alu_a;
        M_game_alu_b = input_alu_b;
        M_game_alu_alufn = M_game_cu_alufn;
        M_game_regfiles_data = M_game_alu_out;
        score_out = M_game_regfiles_score_out;
        timer_out = M_game_regfiles_timer_out;
        highscore = M_game_regfiles_highscore_out;
        button1 = M_game_regfiles_button1_out;
        button2 = M_game_regfiles_button2_out;
        button3 = M_game_regfiles_button3_out;
        gameflag = M_game_regfiles_flag_out;
        debug = M_game_regfiles_debug;
    end
    
    
endmodule