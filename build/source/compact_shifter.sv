/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module compact_shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [4:0] R_77eba118_i;
    logic [5:0] RR_77eba118_i;
    logic [4:0] R_4d17208c_i;
    logic [5:0] RR_4d17208c_i;
    logic [31:0] M_shl_a;
    logic [4:0] M_shl_b;
    logic M_shl_pad;
    logic [31:0] M_shl_shift;
    
    shifter shl (
        .a(M_shl_a),
        .b(M_shl_b),
        .pad(M_shl_pad),
        .shift(M_shl_shift)
    );
    
    
    localparam _MP_SIZE_1056744473 = 6'h20;
    logic [1:0][31:0] M_rev_in;
    logic [1:0][31:0] M_rev_reversed;
    
    genvar idx_0_1056744473;
    
    generate
        for (idx_0_1056744473 = 0; idx_0_1056744473 < 2; idx_0_1056744473 = idx_0_1056744473 + 1) begin: forLoop_idx_0_1056744473
            bit_reverse #(
                .SIZE(_MP_SIZE_1056744473)
            ) rev (
                .in(M_rev_in[idx_0_1056744473]),
                .reversed(M_rev_reversed[idx_0_1056744473])
            );
        end
    endgenerate
    
    
    logic [31:0] M_mux1_s0;
    logic [31:0][1:0] M_mux1_in;
    logic [31:0] M_mux1_out;
    
    genvar idx_0_533106017;
    
    generate
        for (idx_0_533106017 = 0; idx_0_533106017 < 32; idx_0_533106017 = idx_0_533106017 + 1) begin: forLoop_idx_0_533106017
            mux_2 mux1 (
                .s0(M_mux1_s0[idx_0_533106017]),
                .in(M_mux1_in[idx_0_533106017]),
                .out(M_mux1_out[idx_0_533106017])
            );
        end
    endgenerate
    
    
    logic [31:0] M_mux2_s0;
    logic [31:0][1:0] M_mux2_in;
    logic [31:0] M_mux2_out;
    
    genvar idx_0_41719053;
    
    generate
        for (idx_0_41719053 = 0; idx_0_41719053 < 32; idx_0_41719053 = idx_0_41719053 + 1) begin: forLoop_idx_0_41719053
            mux_2 mux2 (
                .s0(M_mux2_s0[idx_0_41719053]),
                .in(M_mux2_in[idx_0_41719053]),
                .out(M_mux2_out[idx_0_41719053])
            );
        end
    endgenerate
    
    
    logic M_padding_s0;
    logic [1:0] M_padding_in;
    logic M_padding_out;
    
    mux_2 padding (
        .s0(M_padding_s0),
        .in(M_padding_in),
        .out(M_padding_out)
    );
    
    
    always @* begin
        M_rev_in[1'h0] = a;
        for (RR_77eba118_i = 0; RR_77eba118_i < 6'h20; RR_77eba118_i = RR_77eba118_i + 1) begin
      R_77eba118_i = (1'h0) + RR_77eba118_i * (1'h1);
            M_mux1_in[R_77eba118_i][1'h0] = a[R_77eba118_i];
            M_mux1_in[R_77eba118_i][1'h1] = M_rev_reversed[1'h0][R_77eba118_i];
            M_mux1_s0[R_77eba118_i] = alufn[1'h0];
            M_shl_a[R_77eba118_i] = M_mux1_out[R_77eba118_i];
        end
        M_padding_in[1'h0] = 1'h0;
        M_padding_in[1'h1] = a[5'h1f];
        M_padding_s0 = alufn[1'h1];
        M_shl_pad = M_padding_out;
        M_shl_b = b;
        M_rev_in[1'h1] = M_shl_shift;
        for (RR_4d17208c_i = 0; RR_4d17208c_i < 6'h20; RR_4d17208c_i = RR_4d17208c_i + 1) begin
      R_4d17208c_i = (1'h0) + RR_4d17208c_i * (1'h1);
            M_mux2_in[R_4d17208c_i][1'h0] = M_shl_shift[R_4d17208c_i];
            M_mux2_in[R_4d17208c_i][1'h1] = M_rev_reversed[1'h1][R_4d17208c_i];
            M_mux2_s0[R_4d17208c_i] = alufn[1'h0];
            shift[R_4d17208c_i] = M_mux2_out[R_4d17208c_i];
        end
    end
    
    
endmodule